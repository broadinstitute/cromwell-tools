#!/usr/bin/env python2.7

import argparse
import json
from cromwell_tools import cromwell_tools


def _start_workflow(arguments):
    user, password = cromwell_tools.harmonize_credentials(
        arguments.secrets_file, arguments.username, arguments.password)
    wdl_file = cromwell_tools.download(arguments.wdl_file)
    inputs_json = cromwell_tools.download(arguments.inputs_json)
    try:
        dependencies_bytes = cromwell_tools.download(arguments.dependencies_json)
        dependencies_json = json.loads(dependencies_bytes)
        dependencies_zip = cromwell_tools.make_zip_in_memory(
            {k: cromwell_tools.download(v) for k, v in dependencies_json.items()}
        )
    except AttributeError:
        dependencies_zip = None
    try:
        options_json = cromwell_tools.download(arguments.options_json)
    except AttributeError:
        options_json = None
    try:
        inputs2_json = cromwell_tools.download(arguments.inputs2_json)
    except AttributeError:
        inputs2_json = None

    response = cromwell_tools.start_workflow(wdl_file=wdl_file, inputs_file=inputs_json,
                                             options_file=options_json, inputs_file2=inputs2_json,
                                             zip_file=dependencies_zip,
                                             cromwell_url=arguments.cromwell_url + '/api/workflows/v1',
                                             cromwell_user=user, cromwell_password=password)
    response.raise_for_status()  # determine if workflow succeeded
    print(response.json()['id'])


def main(arguments=None):
    """given parsed arguments, execute the requested subcommand

    :param object arguments: namespace object containing parsed arguments as methods, produced
      by argparse.ArgumentParser.parse_args()
    """

    if arguments.command == 'run':
        _start_workflow(arguments)
    elif arguments.command == 'wait':
        cromwell_tools.wait_until_workflow_completes(workflow_ids=arguments.workflow_ids,
                                                     timeout_minutes=arguments.timeout_minutes,
                                                     poll_interval_seconds=arguments.poll_interval_seconds,
                                                     cromwell_url=arguments.cromwell_url,
                                                     cromwell_user=arguments.username,
                                                     cromwell_password=arguments.password,
                                                     secrets_file=arguments.secrets_file)
    elif arguments.command == 'status':
        user, password, url = cromwell_tools.harmonize_credentials(
            arguments.secrets_file, arguments.username, arguments.password, arguments.cromwell_url)
        cromwell_tools.get_workflow_statuses(
            ids=arguments.workflow_ids,
            cromwell_url=url,
            cromwell_user=user,
            cromwell_password=password,
            secrets_file=arguments.secrets_file
        )
    else:
        raise RuntimeError('main function received invalid subcommand. This is likely an error in '
                           'testing input.')


if __name__ == '__main__':
    main_parser = argparse.ArgumentParser()

    subparsers = main_parser.add_subparsers(help='sub-command help', dest='command')

    # sub-commands of cromwell-tools
    run = subparsers.add_parser(
        'run', help='run help', description='Run a WDL workflow on Cromwell.')
    wait = subparsers.add_parser(
        'wait', help='wait help', description='Wait for one or more running workflow to finish.')
    status = subparsers.add_parser(
        'status', help='status help', description='Get the status of one or more workflows.')

    # cromwell url and security arguments apply to all sub-commands
    sub_commands = [run, wait, status]
    for p in sub_commands:
        p.add_argument('-c', '--cromwell-url', default=None)
        p.add_argument('-u', '--username', default=None)
        p.add_argument('-p', '--password', default=None)
        p.add_argument('-s', '--secrets-file', default=None)

    # run arguments
    run.add_argument('--wdl-file', type=str, required=True)
    run.add_argument('--dependencies-json', type=str)
    run.add_argument('--inputs-json', type=str, required=True)
    run.add_argument('--inputs2-json', type=str)
    run.add_argument('--options-file', type=str)

    # wait arguments
    wait.add_argument('--workflow-ids', nargs='+', required=True)
    wait.add_argument('--timeout-minutes', type=int, default=120,
                      help='number of minutes to wait before timeout')
    wait.add_argument('--poll-interval-seconds', type=int, default=30,
                      help='seconds between polling cromwell for workflow status')

    # status arguments
    status.add_argument('--workflow-ids', nargs='+', required=True)

    args = main_parser.parse_args()
    main(args)
